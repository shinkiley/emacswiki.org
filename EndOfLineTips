This page is for tips about [[line ending]] characters.

If you see '''##^M##''' in your file, you may have opened a file with DOS-style
line endings (carriage return + line feed) while Emacs assumes it has
Unix-style line endings (line feed only).  (The carriage-return character, sometimes abbreviated as ##CR##, is '''##^M##'''.  The line-feed character, sometimes abbreviated as ##LF##, is '''##^J##'''.)

You can reopen the file with the correct line ending with a command like `C-x C-m r dos'.

If you have a mix of lines that end in ##^M## and lines that don't, you can  use `M-x replace-string RET C-q C-m RET' to remove the ##^M##'s.  '''`C-q'''' quotes the key you press right after it, letting you insert a ##^M## character.  Typing `C-m' won't work -- you have to hold down `Control' while hitting `q' followed by `m'.

If you prefer seeing the '''##^M##''' instead of Emacs autodetecting the file as having dos line endings, then set `inhibit-eol-conversion' to non-`nil' (see [[Manual:Recognize Coding]] in the Emacs manual).

----

To shift linefeeds from one system (Unix, Mac,) to another system (say, DOS,) set the '''buffer file coding system.'''

You can see an example from Elisp in SeijiZenitaniDotEmacs;

Here are the specific codes:

* `C-x C-m f unix'  (for ##LF##)
* `C-x C-m f mac'   (for ##CR##)
* `C-x C-m f dos'   (for ##CR+LF##)

----

Toggle the end of line encoding:

{{{
(defun unix-file ()
  "Change the current buffer to Unix line-ends."
  (interactive)
  (set-buffer-file-coding-system 'unix t))

(defun dos-file ()
  "Change the current buffer to DOS line-ends."
  (interactive)
  (set-buffer-file-coding-system 'dos t))

(defun mac-file ()
  "Change the current buffer to Mac line-ends."
  (interactive)
  (set-buffer-file-coding-system 'mac t))
}}}

See DosToUnix for other methods.

----
Automatically convert line endings to unix:

{{{
(defun no-junk-please-were-unixish ()
  (let ((coding-str (symbol-name buffer-file-coding-system)))
    (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
      (set-buffer-file-coding-system 'unix))))

(add-hook 'find-file-hooks 'no-junk-please-were-unixish)
}}}

----
With Emacs 21 and later, you can preserve the current text coding system and change end-of-line conversion by running the command set-buffer-file-coding-system (C-x RET f) and specifying "unix", "dos", or "mac". Emacs 20 doesn't support that behavior, but this function should achieve the same goal:

   (defun set-eol-conversion (new-eol)
     "Specify new end-of-line conversion NEW-EOL for the buffer's file
   coding system. This marks the buffer as modified."
     (interactive "SEnd-of-line conversion for visited file: \n")
     ;; Check for valid user input.
     (unless (or (string-equal new-eol "unix")
                 (string-equal new-eol "dos")
                 (string-equal new-eol "mac"))
       (error "Invalid EOL type, %s" new-eol))
     (if buffer-file-coding-system
         (let ((new-coding-system (coding-system-change-eol-conversion
                                   buffer-file-coding-system new-eol)))
           (set-buffer-file-coding-system new-coding-system))
       (let ((new-coding-system (coding-system-change-eol-conversion
                                 'undecided new-eol)))
         (set-buffer-file-coding-system new-coding-system)))
     (message "EOL conversion now %s" new-eol))

----
CategoryEditing
